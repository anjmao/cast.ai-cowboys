// <auto-generated />
using System;
using Cowboys.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cowboys.DataAccess.Migrations
{
    [DbContext(typeof(CowboysDbContext))]
    partial class CowboysDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cowboys.DataAccess.Cowboy", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Damage")
                        .HasColumnType("integer")
                        .HasColumnName("damage");

                    b.Property<int>("Health")
                        .HasColumnType("integer")
                        .HasColumnName("health");

                    b.HasKey("Name")
                        .HasName("pk_cowboys");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_cowboys_name");

                    b.ToTable("cowboys", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "John",
                            Damage = 1,
                            Health = 10
                        },
                        new
                        {
                            Name = "Bill",
                            Damage = 2,
                            Health = 8
                        },
                        new
                        {
                            Name = "Sam",
                            Damage = 1,
                            Health = 10
                        },
                        new
                        {
                            Name = "Peter",
                            Damage = 3,
                            Health = 5
                        },
                        new
                        {
                            Name = "Philip",
                            Damage = 1,
                            Health = 15
                        });
                });

            modelBuilder.Entity("Cowboys.DataAccess.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_game");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_id");

                    b.ToTable("game", (string)null);
                });

            modelBuilder.Entity("Cowboys.DataAccess.GameEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("event_time");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event_type");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.HasKey("Id")
                        .HasName("pk_game_events");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_game_events_game_id");

                    b.ToTable("game_events", (string)null);
                });

            modelBuilder.Entity("Cowboys.DataAccess.InGameCowboy", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Damage")
                        .HasColumnType("integer")
                        .HasColumnName("damage");

                    b.Property<int>("Health")
                        .HasColumnType("integer")
                        .HasColumnName("health");

                    b.Property<bool>("isReady")
                        .HasColumnType("boolean")
                        .HasColumnName("is_ready");

                    b.Property<bool>("isSelected")
                        .HasColumnType("boolean")
                        .HasColumnName("is_selected");

                    b.HasKey("GameId", "Name")
                        .HasName("pk_in_game_cowboys");

                    b.HasIndex("GameId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_in_game_cowboys_game_id_name");

                    b.ToTable("in_game_cowboys", (string)null);
                });

            modelBuilder.Entity("Cowboys.DataAccess.GameEvent", b =>
                {
                    b.HasOne("Cowboys.DataAccess.Game", "Game")
                        .WithMany("GameEvents")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_events_game_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Cowboys.DataAccess.InGameCowboy", b =>
                {
                    b.HasOne("Cowboys.DataAccess.Game", "Game")
                        .WithMany("Cowboys")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_in_game_cowboys_game_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Cowboys.DataAccess.Game", b =>
                {
                    b.Navigation("Cowboys");

                    b.Navigation("GameEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
